// This file is part of libigl, a simple c++ geometry processing library.
// 
// Copyright (C) 2013 Alec Jacobson <alecjacobson@gmail.com>
// 
// This Source Code Form is subject to the terms of the Mozilla Public License 
// v. 2.0. If a copy of the MPL was not distributed with this file, You can 
// obtain one at http://mozilla.org/MPL/2.0/.
#ifndef IGL_SUM_H
#define IGL_SUM_H
#include "igl_inline.h"
#include <Eigen/Sparse>

namespace igl
{
  /// Sum the columns or rows of a sparse matrix
  ///
  /// @tparam  should be a eigen sparse matrix primitive type like int or double
  /// @param[in] X  m by n sparse matrix
  /// @param[in] dim  dimension along which to sum (1 or 2)
  /// @param[out] S  n-long sparse vector (if dim == 1) 
  ///   or m-long sparse vector (if dim == 2)
  ///
  /// \note If your looking for dense matrix matlab like sum for eigen matrics
  /// just use:
  ///
  ///      M.colwise().sum() or M.rowwise().sum()
  /// 
  template <typename T>
  IGL_INLINE void sum(
    const Eigen::SparseMatrix<T>& X, 
    const int dim,
    Eigen::SparseVector<T>& S);
  /// \overload
  /// \brief Sum is "conducted" in the type of DerivedB::Scalar 
  /// @tparam AType  should be a eigen sparse matrix primitive type like int or double
  /// @tparam DerivedB  should be a eigen dense matrix primitive type like int or double
  template <typename AType, typename DerivedB>
  IGL_INLINE void sum(
    const Eigen::SparseMatrix<AType> & A, 
    const int dim,
    Eigen::PlainObjectBase<DerivedB>& B);
}

#include "redux.h"

template <typename T>
IGL_INLINE void igl::sum(
  const Eigen::SparseMatrix<T>& X, 
  const int dim,
  Eigen::SparseVector<T>& S)
{
  assert((dim == 1 || dim == 2) && "dim must be 2 or 1");
  // Get size of input
  int m = X.rows();
  int n = X.cols();
  // resize output
  if(dim==1)
  {
    S = Eigen::SparseVector<T>(n);
  }else
  {
    S = Eigen::SparseVector<T>(m);
  }

  // Iterate over outside
  for(int k=0; k<X.outerSize(); ++k)
  {
    // Iterate over inside
    for(typename Eigen::SparseMatrix<T>::InnerIterator it (X,k); it; ++it)
    {
      if(dim == 1)
      {
        S.coeffRef(it.col()) += it.value();
      }else
      {
        S.coeffRef(it.row()) += it.value();
      }
    }
  }
}

template <typename AType, typename DerivedB>
IGL_INLINE void igl::sum(
  const Eigen::SparseMatrix<AType> & A, 
  const int dim,
  Eigen::PlainObjectBase<DerivedB>& B)
{
  typedef typename DerivedB::Scalar Scalar;
  igl::redux(A,dim,[](Scalar a, Scalar b){ return a+b;},B);
}

#ifdef IGL_STATIC_LIBRARY
// Explicit template instantiation
// generated by autoexplicit.sh
template void igl::sum<double, Eigen::Matrix<double, -1, 1, 0, -1, 1> >(Eigen::SparseMatrix<double, 0, int> const&, int, Eigen::PlainObjectBase<Eigen::Matrix<double, -1, 1, 0, -1, 1> >&);
// generated by autoexplicit.sh
template void igl::sum<bool, Eigen::Matrix<int, -1, 1, 0, -1, 1> >(Eigen::SparseMatrix<bool, 0, int> const&, int, Eigen::PlainObjectBase<Eigen::Matrix<int, -1, 1, 0, -1, 1> >&);
template void igl::sum<double>(Eigen::SparseMatrix<double, 0, int> const&, int, Eigen::SparseVector<double, 0, int>&);
#endif


#endif
